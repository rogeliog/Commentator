// Generated by CoffeeScript 1.3.3
(function() {

  describe("Commentator", function() {
    beforeEach(function() {
      var TestPoster, comment_one, comment_two, comments, element;
      comment_one = {
        message: "Podemos hacer una escala en la ma\u00f1ana por caf\u00e9?",
        name: "Margarito",
        author: {
          thumb_photo_url: "/system/photos/172/thumb/Margarito.jpg?1298321229",
          area_name: "Poemas"
        }
      };
      comment_two = {
        message: "Mi Comentario",
        name: "Margarito",
        author: {
          thumb_photo_url: "/system/photos/172/thumb/Margarito.jpg?1298321229",
          area_name: "Comentarios"
        }
      };
      comments = [comment_one];
      element = $("<section>");
      TestPoster = (function() {

        function TestPoster(comment) {
          this.comment = comment;
        }

        TestPoster.prototype.post = function(url, data, callback) {
          return callback(this.comment);
        };

        return TestPoster;

      })();
      return this.app = new Commentator({
        el: element,
        url: "URL",
        comments: comments,
        poster: new TestPoster(comment_two)
      });
    });
    describe("at initialization", function() {
      it("should have a form view", function() {
        return expect(this.app.form_view.constructor).toEqual(Commentator.CommentFormView);
      });
      it("should have a comments view", function() {
        return expect(this.app.comments_view.constructor).toEqual(Commentator.CommentsView);
      });
      it("should have comments", function() {
        return expect(this.app.comments.length).toEqual(1);
      });
      it("should have an empty form", function() {
        return expect(this.app.form_view.textarea().val()).toEqual("");
      });
      it("should have a non valid comment", function() {
        return expect(this.app.form_view.is_comment_valid()).toBeFalsy();
      });
      return it("should have a disabled button", function() {
        return expect(this.app.form_view.button().is(":disabled")).toBeTruthy();
      });
    });
    describe("after some words", function() {
      beforeEach(function() {
        this.app.form_view.textarea().val("some words");
        return this.app.form_view.textarea().trigger("keyup");
      });
      it("should have a valid comment", function() {
        return expect(this.app.form_view.is_comment_valid()).toBeTruthy();
      });
      return it("should have an enabled button", function() {
        return expect(this.app.form_view.button().is(":disabled")).toBeFalsy();
      });
    });
    describe("after click button", function() {
      beforeEach(function() {
        this.app.form_view.textarea().val("Some words");
        return this.app.form_view.button().trigger("submit");
      });
      return it("should have a disabled button", function() {
        return expect(this.app.form_view.button().is(":disabled")).toBeTruthy();
      });
    });
    describe("send a comment", function() {
      beforeEach(function() {
        this.app.form_view.textarea().val("Mi Comentario");
        return this.app.form_view.el.trigger("submit");
      });
      it("should have a new comment", function() {
        expect(this.app.comments.length).toEqual(2);
        return expect(this.app.comments_view.el.html()).toContain("Mi Comentario");
      });
      it("should have a clean textarea", function() {
        return expect(this.app.form_view.textarea().val()).toEqual("");
      });
      return it("should have a disabled button", function() {
        return expect(this.app.form_view.button().is(":disabled")).toBeTruthy();
      });
    });
    return describe("send an empty comment", function() {
      beforeEach(function() {
        return this.app.form_view.el.trigger("submit");
      });
      return it("should not have a new comment", function() {
        return expect(this.app.comments.length).toEqual(1);
      });
    });
  });

}).call(this);
