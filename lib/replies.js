// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Replies = (function() {

    function Replies(args) {
      this.add_reply = __bind(this.add_reply, this);

      this.render_form = __bind(this.render_form, this);
      this.el = args.el;
      this.comment = args.comment;
      this.replies = this.comment.replies || [];
      this.reply_template = args.reply_template;
      this.replies_form_template = args.replies_form_template;
      this.url = this.comment.replies_url;
      this.display_form = args.display_form;
      this.poster = args.poster || new Commentator.Poster;
      this.el.delegate("[data-link='reply']", "click", this.render_form);
      this.el.delegate("form", "submit", this.add_reply);
      this.render_replies();
      if (this.display_form && (this.url != null)) {
        this.add_reply_link();
      }
    }

    Replies.prototype.add_reply_link = function() {
      this.reply_link = $("<a data-link='reply' href='#'>Comentar</a>");
      return this.el.append(this.reply_link);
    };

    Replies.prototype.remove_reply_link = function() {
      this.reply_link.remove();
      return this.reply_link = null;
    };

    Replies.prototype.render_replies = function() {
      this.replies_view = new Replies.RepliesView(this, this.replies);
      return this.el.append(this.replies_view.render());
    };

    Replies.prototype.render_form = function(e) {
      e.preventDefault(e);
      this.remove_reply_link();
      this.form_view = new Replies.ReplyFormView(this);
      return this.el.append(this.form_view.render());
    };

    Replies.prototype.add_reply = function(e) {
      e.preventDefault();
      if (this.form_view.is_message_valid()) {
        return this._save_message();
      }
    };

    Replies.prototype._save_message = function() {
      var data,
        _this = this;
      data = {
        message: this.form_view.message()
      };
      return this.poster.post(this.url, data, function(json) {
        _this.replies.push(json);
        _this.replies_view.add_reply(json);
        _this.form_view.remove();
        return _this.add_reply_link();
      });
    };

    return Replies;

  })();

  Replies.RepliesView = (function() {

    function RepliesView(app, replies) {
      this.app = app;
      this.replies = replies;
      this.el = $("<div id='replies_list'>");
    }

    RepliesView.prototype.render = function() {
      var reply, _i, _len, _ref;
      _ref = this.replies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        reply = _ref[_i];
        this.add_reply(reply);
      }
      return this.el;
    };

    RepliesView.prototype.add_reply = function(reply) {
      var view;
      view = new Replies.ReplyItemView(this.app, reply);
      return this.el.append(view.render());
    };

    return RepliesView;

  })();

  Replies.ReplyFormView = (function() {

    function ReplyFormView(app) {
      this.app = app;
      this.initialize_text_expander = __bind(this.initialize_text_expander, this);

      this.change_state = __bind(this.change_state, this);

      this.disable = __bind(this.disable, this);

      this.el = $("<form>");
      this.template = this.app.replies_form_template;
      this.el.delegate("textarea", "click", this.initialize_text_expander);
      this.el.delegate("textarea", "keyup", this.change_state);
      this.el.submit(this.disable);
    }

    ReplyFormView.prototype.render = function() {
      this.el.html(this.template);
      this.disable();
      return this.el;
    };

    ReplyFormView.prototype.disable = function() {
      return this.button().attr("disabled", true);
    };

    ReplyFormView.prototype.enable = function() {
      return this.button().attr("disabled", false);
    };

    ReplyFormView.prototype.change_state = function() {
      if (this.is_message_valid()) {
        return this.enable();
      } else {
        return this.disable();
      }
    };

    ReplyFormView.prototype.textarea = function() {
      return this.el.find("textarea");
    };

    ReplyFormView.prototype.button = function() {
      return this.el.find("button");
    };

    ReplyFormView.prototype.message = function() {
      return this.textarea().val();
    };

    ReplyFormView.prototype.clean = function() {
      return this.textarea().val("");
    };

    ReplyFormView.prototype.remove = function() {
      this.el.remove();
      return this.el = null;
    };

    ReplyFormView.prototype.is_message_valid = function() {
      return this.message() !== "";
    };

    ReplyFormView.prototype.initialize_text_expander = function() {
      var MIN_HEIGHT;
      MIN_HEIGHT = 18;
      return this.textarea().TextAreaExpander(MIN_HEIGHT);
    };

    return ReplyFormView;

  })();

  Replies.ReplyItemView = (function() {

    function ReplyItemView(app, reply) {
      this.app = app;
      this.reply = reply;
      this.el = $("<div class='reply'>");
      this.template = this.app.reply_template;
    }

    ReplyItemView.prototype.render = function() {
      this.el.html(this.template(this.reply));
      return this.el;
    };

    return ReplyItemView;

  })();

}).call(this);
